// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: tenant.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenant (name,logo) VALUES ($1,$2) RETURNING id, name, logo, created_at
`

type CreateTenantParams struct {
	Name string      `json:"name"`
	Logo pgtype.Text `json:"logo"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.Name, arg.Logo)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenant 
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTenant, id)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT id, name, logo, created_at FROM tenant WHERE id = $1
`

func (q *Queries) GetTenant(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :one
SELECT id, name, logo, created_at FROM tenant ORDER BY id LIMIT $1 OFFSET $2
`

type ListTenantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTenants(ctx context.Context, arg ListTenantsParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, listTenants, arg.Limit, arg.Offset)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenant 
SET
  name = COALESCE($1,name),
  logo = COALESCE($2,logo)
WHERE id = $3
RETURNING id, name, logo, created_at
`

type UpdateTenantParams struct {
	Name pgtype.Text `json:"name"`
	Logo pgtype.Text `json:"logo"`
	ID   uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, updateTenant, arg.Name, arg.Logo, arg.ID)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Logo,
		&i.CreatedAt,
	)
	return i, err
}
